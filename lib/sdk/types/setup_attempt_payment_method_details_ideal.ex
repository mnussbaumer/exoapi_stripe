defmodule ExOAPI.Stripe.Schemas.SetupAttemptPaymentMethodDetailsIdeal do
  use TypedEctoSchema
  import Ecto.Changeset

  @type params :: map()

  @moduledoc """
  **:bank** :: *:string*

  The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.


  **:bic** :: *:string*

  The Bank Identifier Code of the customer's bank.


  **:generated_sepa_debit** :: *ExOAPI.Stripe.Schemas.PaymentMethod | :string*

  The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.


  **:generated_sepa_debit_mandate** :: *ExOAPI.Stripe.Schemas.Mandate | :string*

  The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.


  **:iban_last4** :: *:string*

  Last four characters of the IBAN.


  **:verified_name** :: *:string*

  Owner's verified full name. Values are verified or provided by iDEAL directly
  (if supported) at the time of authorization or settlement. They cannot be set or mutated.


  """

  @primary_key false
  typed_embedded_schema do
    field(:bank, Ecto.Enum,
      values: [
        :van_lanschot,
        :triodos_bank,
        :sns_bank,
        :revolut,
        :regiobank,
        :rabobank,
        :moneyou,
        :knab,
        :ing,
        :handelsbanken,
        :bunq,
        :asn_bank,
        :abn_amro
      ]
    )

    field(:bic, Ecto.Enum,
      values: [
        :TRIONL2U,
        :SNSBNL2A,
        :REVOLT21,
        :RBRBNL21,
        :RABONL2U,
        :MOYONL21,
        :KNABNL2H,
        :INGBNL2A,
        :HANDNL2A,
        :FVLBNL22,
        :BUNQNL2A,
        :ASNBNL21,
        :ABNANL2A
      ]
    )

    field(:generated_sepa_debit, ExOAPI.EctoTypes.AnyOf,
      types: [:string, ExOAPI.Stripe.Schemas.PaymentMethod]
    )

    field(:generated_sepa_debit_mandate, ExOAPI.EctoTypes.AnyOf,
      types: [:string, ExOAPI.Stripe.Schemas.Mandate]
    )

    field(:iban_last4, :string)

    field(:verified_name, :string)
  end

  @spec changeset(params()) :: Ecto.Changeset.t()
  @spec changeset(__MODULE__.t(), params()) :: Ecto.Changeset.t()
  def changeset(struct \\ %__MODULE__{}, params) do
    struct
    |> cast(params, [
      :verified_name,
      :iban_last4,
      :generated_sepa_debit_mandate,
      :generated_sepa_debit,
      :bic,
      :bank
    ])
  end
end