defmodule ExOAPI.Stripe.Schemas.Refund do
  use TypedEctoSchema
  import Ecto.Changeset

  @type params :: map()

  @moduledoc """
  **description**: `Refund` objects allow you to refund a charge that has previously been created
  but not yet refunded. Funds will be refunded to the credit or debit card that
  was originally charged.

  Related guide: [Refunds](https://stripe.com/docs/refunds).

  **:amount** :: *:integer*

  Amount, in %s.


  **:balance_transaction** :: *ExOAPI.Stripe.Schemas.BalanceTransaction | :string*

  Balance transaction that describes the impact on your account balance.


  **:charge** :: *ExOAPI.Stripe.Schemas.Charge | :string*

  ID of the charge that was refunded.


  **:created** :: *:integer*

  Time at which the object was created. Measured in seconds since the Unix epoch.


  **:currency** :: *:string*

  Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).


  **:description** :: *:string*

  An arbitrary string attached to the object. Often useful for displaying to users. (Available on non-card refunds only)


  **:failure_balance_transaction** :: *ExOAPI.Stripe.Schemas.BalanceTransaction | :string*

  If the refund failed, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.


  **:failure_reason** :: *:string*

  If the refund failed, the reason for refund failure if known. Possible values are `lost_or_stolen_card`, `expired_or_canceled_card`, or `unknown`.


  **:id** :: *:string*

  Unique identifier for the object.


  **:metadata** :: *:map*

  Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.


  **:next_action** :: *ExOAPI.Stripe.Schemas.RefundNextAction*


  **:object** :: *:string*

  String representing the object's type. Objects of the same type share the same value.


  **:payment_intent** :: *ExOAPI.Stripe.Schemas.PaymentIntent | :string*

  ID of the PaymentIntent that was refunded.


  **:reason** :: *:string*

  Reason for the refund, either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).


  **:receipt_number** :: *:string*

  This is the transaction number that appears on email receipts sent for this refund.


  **:source_transfer_reversal** :: *ExOAPI.Stripe.Schemas.TransferReversal | :string*

  The transfer reversal that is associated with the refund. Only present if the charge came from another Stripe account. See the Connect documentation for details.


  **:status** :: *:string*

  Status of the refund. For credit card refunds, this can be `pending`, `succeeded`, or `failed`. For other types of refunds, it can be `pending`, `succeeded`, `failed`, or `canceled`. Refer to our [refunds](https://stripe.com/docs/refunds#failed-refunds) documentation for more details.


  **:transfer_reversal** :: *ExOAPI.Stripe.Schemas.TransferReversal | :string*

  If the accompanying transfer was reversed, the transfer reversal object. Only applicable if the charge was created using the destination parameter.


  """

  @primary_key false
  typed_embedded_schema do
    field(:amount, :integer)

    field(:balance_transaction, ExOAPI.EctoTypes.AnyOf,
      types: [:string, ExOAPI.Stripe.Schemas.BalanceTransaction]
    )

    field(:charge, ExOAPI.EctoTypes.AnyOf, types: [:string, ExOAPI.Stripe.Schemas.Charge])

    field(:created, :integer)

    field(:currency, :string)

    field(:description, :string)

    field(:failure_balance_transaction, ExOAPI.EctoTypes.AnyOf,
      types: [:string, ExOAPI.Stripe.Schemas.BalanceTransaction]
    )

    field(:failure_reason, :string)

    field(:id, :string)

    field(:metadata, :map)

    embeds_one(:next_action, ExOAPI.Stripe.Schemas.RefundNextAction)

    field(:object, Ecto.Enum, values: [:refund])

    field(:payment_intent, ExOAPI.EctoTypes.AnyOf,
      types: [:string, ExOAPI.Stripe.Schemas.PaymentIntent]
    )

    field(:reason, Ecto.Enum,
      values: [:requested_by_customer, :fraudulent, :expired_uncaptured_charge, :duplicate]
    )

    field(:receipt_number, :string)

    field(:source_transfer_reversal, ExOAPI.EctoTypes.AnyOf,
      types: [:string, ExOAPI.Stripe.Schemas.TransferReversal]
    )

    field(:status, :string)

    field(:transfer_reversal, ExOAPI.EctoTypes.AnyOf,
      types: [:string, ExOAPI.Stripe.Schemas.TransferReversal]
    )
  end

  @spec changeset(params()) :: Ecto.Changeset.t()
  @spec changeset(__MODULE__.t(), params()) :: Ecto.Changeset.t()
  def changeset(struct \\ %__MODULE__{}, params) do
    struct
    |> cast(params, [
      :transfer_reversal,
      :status,
      :source_transfer_reversal,
      :receipt_number,
      :reason,
      :payment_intent,
      :object,
      :metadata,
      :id,
      :failure_reason,
      :failure_balance_transaction,
      :description,
      :currency,
      :created,
      :charge,
      :balance_transaction,
      :amount
    ])
    |> validate_required([:object, :id, :currency, :created, :amount])
    |> cast_embed(:next_action)
  end
end